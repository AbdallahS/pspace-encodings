%%% gttt board
player[black].
player[white].
vertex[N], ~vertex[N+1] :: vertexLast[N].
vertexLast[N] :: lastTimePoint[N+1-2].
lastTimePoint[F] :: t[1..F].

t[T], T#mod2==1 :: timeP[black,T].
t[T], T#mod2==0 :: timeP[white,T].
hyperedge[A,E,_] :: isHyperedge[A,E].

dim[0..2].
dim[I], ~dim[I+1] :: maxDim[I+1].
maxDim[I] :: vertex[0..I*I-1].
player[A], dim[I], dim[J], maxDim[D] :: hyperedge[A, J, J+I*D].
player[A], dim[I], dim[J], maxDim[D] :: hyperedge[A, D+J, I+D*J].
player[A], dim[I], maxDim[D] :: hyperedge[A, 2*D+1, (D-1)*(I+1)].
player[A], dim[I], maxDim[D] :: hyperedge[A, 2*D+2, (D+1)*I].

vertex[V], vertex[I], vertexLast[N], 2**I <= N :: getBit[V,I,(V/(2**I))#mod2].
getBit[_,I,_] :: bit[I].

%%quantification
%% () search variables, [] grounding variables
#exists[0] :: time(0)?
#exists[0], vertex[V], player[A] :: board(A,V,0)?
#exists[T], t[T] :: time(T)?
#forall[T+1], timeP[white,T], bit[I] :: move(I,T)?
#exists[T+1], timeP[black,T], bit[I] :: move(I,T)?
#exists[T+1], vertex[V], player[A], t[T] :: board(A,V,T)?
#exists[F], lastTimePoint[F], hyperedge[black,E,_] :: win(E)?
%% the nesting of the quantifiers is not correct yet
%% On the innermost level we have, we only have one level atm.

%% clause type 1
t[T] :: ~time(T), time(T-1).

%% clause type 2
player[A], vertex[V], ~init[A,V] :: ~board(A,V,0).
player[A], vertex[V], init[A,V] :: board(A,V,0).
%% player[A], vertex[V] :: ~board(A,V,0).
init[black,0].
init[white,1].

%% clause type 3
vertex[V], time[T] :: ~board(black, V, T), ~board(white, V, T).

%% clause type 4
player[A], vertex[V], t[T] :: ~board(A,V,T-1), board(A,V,T).

%% clause type 5
player[A], vertex[V], t[T], ~timeP[A,T] :: board(A,V,T-1), ~board(A,V,T).

%% clause type 6
player[A], vertex[V], t[T] :: time(T), board(A,V,T-1), ~board(A,V,T).

%%% clause type 7
%%% : getBit[V,I,1] has square brackets because we are defining I. on the clause side we have an I but it is not defined earlier, get bits defines I.
vertex[V], timeP[white,T] :: ~time(T), board(black, V, T-1), board(white, V, T), ~move(I,T) : getBit[V,I,1], move(I,T) : getBit[V,I,0].

%%% clause type 8
vertex[V], timeP[black,T], getBit[V,I,1] :: board(black, V, T-1), ~board(black, V, T), move(I, T).

%%% clause type 9
vertex[V], timeP[black,T], getBit[V,I,0] :: board(black, V, T-1), ~board(black, V, T), ~move(I, T).

%%% clause type 10
win(E) : hyperedge[black,E,_].

%%% clause type 11
hyperedge[black,E,V], lastTimePoint[F] :: ~win(E), board(black, V, F).

%% clause type 12
%% we can use _ to represent any vertex here or use isHyperedge
hyperedge[white,E,_], lastTimePoint[F] :: ~board(white,V,F) : hyperedge[white,E,V].

%% clause type 13
hyperedge[black,E,_], lastTimePoint[F] :: win(E), ~board(black, V, F) : hyperedge[black,E,V].

%% example
%% b|w|-
%% -|-|-
%% -|-|-







