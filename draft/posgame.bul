%%% gttt board
player[1..2].
vertex[N], ~vertex[N+1] :: vertexLast[N].
vertexLast[N] :: lastTimePoint[N+1].
lastTimePoint[F] :: t[0..F].
black[1]. white[2].
time[T], T#mod2=1:: timeP[1,T].
time[T], T#mod2=0:: timeP[2,T].
hyperedge[A,E,V] :: isHyperedge[A,E].

dim[0..2].
dim[I], ~dim[I+1] :: maxDim[I+1].
maxDim[I] :: vertex[0..I*I-1].
player[A], dim[I], dim[J], maxDim[D] :: hyperedge[A, J, J+I*D].
player[A], dim[I], dim[J], maxDim[D] :: hyperedge[A, D+J, I+D*J].
player[A], dim[I], maxDim[D] :: hyperedge[A, 2*D+1, (D-1)*(I+1)].
player[A], dim[I], maxDim[D] :: hyperedge[A, 2*D+2, (D+1)*I].



vertex[V], vertex[I], vertexLast[N], 2**I <= N :: getBit[V,I,(V/(2**I))#mod2].

%%% clause type 5
player[A], vertex[V], time[T], ~timeP[A,T] ::
%%% clause type 8
black[P], vertex[V], timeP[P,T], getBit[V,I,1] :: board(P, V, T-1), ~board(P, V, T), move(I, T).
%%% clause type 13 where player B=1
black[P], isHyperedge[P, E], lastTimePoint[F] :: win(E), ~board(P, V, F) : hyperedge[P,E,V].

t[T], T > 0 :: ~time(T), time(T-1).	%% (1)

player[A], vertex[V] :: ~board(A,V,0).    %% (2)
vertex[V], t[T]:: ~board(1,v,t), ~board(2,v,t).     %% (3)
player[A], vertex[V], t[T], T > 0 :: ~board(A,V,T-1), board(A,V,T).    %% (4)

player[A], vertex[V], t[T] 
player[A], vertex[V], t[T] :: time(T), board(A,V,T-1), ~board(A,V,T).  %% (6)

#forall[1], vertex[V], t[T] :: move?
