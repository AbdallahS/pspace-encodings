edge[U, V] :: s(U), s(V).

%% vertex[A], vertex[B], vertex[C], vertex[D], vertex[E], A < B, B < C, C < D, D < E :: ~s(A), ~s(B), ~s(C), ~s(D), ~s(E).

%% C1 -> (~s(A) ∧ ~s(B) ∧ ~s(C) ∧ ~s(D)) v
%% C2 -> (~s(A) ∧ ~s(B) ∧ ~s(C) ∧ ~s(E)) v
%% C3 -> (~s(A) ∧ ~s(C) ∧ ~s(D) ∧ ~s(E)) v
%% C4 -> (~s(B) ∧ ~s(C) ∧ ~s(D) ∧ ~s(E)) v
%% C5 -> (~s(A) ∧ ~s(B) ∧ ~s(D) ∧ ~s(E)) 
%% 
%% y1 <-> (~s(A) ∧ ~s(B) ∧ ~s(C) ∧ ~s(D))
%% y2 <-> (y1 v (~s(A) ∧ ~s(B) ∧ ~s(C) ∧ ~s(E)))
%% y3 <-> (y2 v (~s(A) ∧ ~s(C) ∧ ~s(D) ∧ ~s(E)))
%% y4 <-> (y3 v (~s(B) ∧ ~s(C) ∧ ~s(D) ∧ ~s(E)))
%% y5 <-> (y4 v (~s(A) ∧ ~s(B) ∧ ~s(D) ∧ ~s(E)))
%% 
%% ϕ = y5 ∧ (y4 v (~s(A) ∧ ~s(B) ∧ ~s(D) ∧ ~s(E))) ∧
%% 
%% n = 5 k = 3
%% n = 6 k = 3
%% n = 10 k = 5
%% 
%% clauses: m edge clauses + n!/((k+1)!(n-k-1)!) budget clauses
%% 
%% vs
%% 
%% sequential counter: 2nk + 2n − 3k + 1 clauses and requires (n − 1) · k auxiliary variables
%% 
%% (-v1 v s1,3) ∧ (-v5v-s4,3)
%% 
%% atleast_{A,0} <-> true
%% atleast_{A,1} <-> s(A)
%% atleast_{B,0} <-> true
%% atleast_{B,1} <-> s(A) | s(B)
%% atleast_{B,2} <-> s(A) & s(B)
%% 
%% for example if we have two vertices A and B, the vertex cover is A | B
%% then atleast_{B,1} is going to be true if our budget is 1

