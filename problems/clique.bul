%%% covering edges
edge[U, V] :: s(U), s(V).
%%% clique selection of at least k, any two selected vertices need to be adjacent 
vertex[A], vertex[B], ~edge[A,B], A < B :: ~s(A), ~s(B).

%% %%% use sequential counter
%% atleast(i, j), at least j among i

%% %%% A set with 0 or 1 vertices is automatically a clique. A set of 2 vertices is a clique precisely if they are connected by an edge.

%% %%% if we have two vertices A, B, a clique, will be A & B if there is an edge, and A | B if there is no edge, and we call the maximum clique atMost

%% atMost{A,0} = true
%% atMost{A,1} = s(A) --soft clause on the vertex'

%% atMost{B,0} = true
%% atMost{B,1} = s(A) | s(B)
%% atMost{B,2} = s(A) & s(B)

%% atMost{C,0} = true
%% atMost{C,1} = s(A) | s(B) | s(C)
%% atMost{C,2} = atMost{B,1} & s(C) | atMost{B,2}
%% atMost{C,3} = s(A) & s(B) & s(C)

%% atMost{D,0} = true
%% atMost{D,1} = s(A) | s(B) | s(C) | s(D)
%% atMost{D,2} = atMost{C,1} & s(D) | atMost{C,2}
%% atMost{D,3} = atMost{C,2} & s(D) | atMost{C,3}
%% atMost{D,4} = atMost{C,3} & s(D)

%% for i > j
%% atMost_{i, j} <-> atMost_{i-1,j} | (atMost_{i-1,j-1} & s(i))
%% for i = j
%% atMost_{i, j} <-> (atMost_{i-1,j-1} & s(i))
%% for j = 1
%% atMost{i,1} <-> s(1) | s(2) | .... | s(i)

%% %%% example:

%% vertex[1..5].
%% edge[1,2]. edge[1,3].
%% edge[2,3]. 
%% edge[4,5].

%% vertex[1], vertex[4], not edge[1,4], 1 < 4 :: -s(1), -s(4)
%% vertex[1], vertex[5], not edge[1,5], 1 < 5 :: -s(1), -s(5)

%% vertex[2], vertex[4], not edge[2,4], 2 < 4 :: -s(2), -s(4)
%% vertex[2], vertex[5], not edge[2,5], 2 < 5 :: -s(2), -s(5)

%% vertex[3], vertex[4], not edge[3,4], 3 < 4 :: -s(3), -s(4)
%% vertex[3], vertex[5], not edge[3,5], 3 < 5 :: -s(3), -s(5)

%% {1,2,3}